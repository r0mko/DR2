import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate Dr.Graphics 1.0 /Applications/Qt Creator.app/Contents/Resources/qmldesigner/propertyEditorQmlSources/'

Module {
    dependencies: [
        "Dr 1.0",
        "Dr.MetaGraph 1.0",
        "Dr.UI 1.0",
        "Dr.Xvfb 1.0",
        "HelperWidgets 2.0",
        "Qt.labs.folderlistmodel 2.1",
        "Qt.labs.settings 1.0",
        "QtGraphicalEffects 1.0",
        "QtQml.Models 2.2",
        "QtQuick 2.5",
        "QtQuick.Controls 1.4",
        "QtQuick.Controls.Styles 1.4",
        "QtQuick.Dialogs 1.2",
        "QtQuick.Extras 1.4",
        "QtQuick.Extras.Private.CppUtils 1.1",
        "QtQuick.Layouts 1.2",
        "QtQuick.PrivateWidgets 1.1",
        "QtQuick.Window 2.2"
    ]
    Component {
        name: "AAWindow"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["AAWindow 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "samples"; type: "int" }
        Property { name: "screenId"; type: "int" }
        Signal {
            name: "screenIdChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setScreenId"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "maximizeAtScreen"
            Parameter { name: "id"; type: "int" }
        }
    }
    Component {
        name: "AbstractGuideItemHandle"
        prototype: "VisualInstanceHandle"
        exports: ["AbstractGuideItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "result"; type: "GuidePath"; isReadonly: true }
        Property { name: "source"; type: "GuidePath" }
        Property { name: "smooth"; type: "double" }
        Property { name: "offset"; type: "double" }
        Property { name: "precision"; type: "double" }
        Property { name: "sourceStart"; type: "double" }
        Property { name: "sourceEnd"; type: "double" }
        Property { name: "fast"; type: "bool" }
        Method { name: "updatePath" }
    }
    Component {
        name: "Creatist"
        prototype: "QObject"
        exports: ["Creatist 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "create"
            type: "QVariant"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "attr"; type: "QVariantMap" }
        }
        Method {
            name: "create"
            type: "QVariant"
            Parameter { name: "type"; type: "string" }
        }
        Method {
            name: "handle"
            type: "QVariant"
            Parameter { name: "type"; type: "string" }
        }
        Method {
            name: "serialize"
            type: "QByteArray"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "deserialize"
            type: "QVariant"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "blob"; type: "QByteArray" }
        }
    }
    Component {
        name: "CustomTransform"
        prototype: "QQuickTransform"
        exports: ["CustomTransform 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "m11"; type: "double" }
        Property { name: "m12"; type: "double" }
        Property { name: "m13"; type: "double" }
        Property { name: "m21"; type: "double" }
        Property { name: "m22"; type: "double" }
        Property { name: "m23"; type: "double" }
        Property { name: "m31"; type: "double" }
        Property { name: "m32"; type: "double" }
        Property { name: "m33"; type: "double" }
        Signal { name: "transformChanged" }
        Method {
            name: "rotate"
            Parameter { name: "angle"; type: "double" }
            Parameter { name: "axis"; type: "Qt::Axis" }
        }
        Method {
            name: "rotate"
            Parameter { name: "angle"; type: "double" }
        }
        Method {
            name: "rotateRadians"
            Parameter { name: "angle"; type: "double" }
            Parameter { name: "axis"; type: "Qt::Axis" }
        }
        Method {
            name: "rotateRadians"
            Parameter { name: "angle"; type: "double" }
        }
        Method {
            name: "scale"
            Parameter { name: "sx"; type: "double" }
            Parameter { name: "sy"; type: "double" }
        }
        Method {
            name: "shear"
            Parameter { name: "sh"; type: "double" }
            Parameter { name: "sv"; type: "double" }
        }
        Method { name: "reset" }
        Method {
            name: "setM11"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setM12"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setM13"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setM21"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setM22"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setM23"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setM31"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setM32"
            Parameter { name: "arg"; type: "double" }
        }
        Method {
            name: "setM33"
            Parameter { name: "arg"; type: "double" }
        }
        Method { name: "determinant"; type: "double" }
        Method { name: "dx"; type: "double" }
        Method { name: "dy"; type: "double" }
        Method { name: "isAffine"; type: "bool" }
        Method { name: "isIdentity"; type: "bool" }
        Method { name: "isInvertible"; type: "bool" }
        Method { name: "isRotating"; type: "bool" }
        Method { name: "isScaling"; type: "bool" }
        Method { name: "isTranslating"; type: "bool" }
    }
    Component {
        name: "Distort"
        prototype: "QQuickTransform"
        exports: ["Distort 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "p1"; type: "QPointF" }
        Property { name: "p2"; type: "QPointF" }
        Property { name: "p3"; type: "QPointF" }
        Property { name: "p4"; type: "QPointF" }
        Signal {
            name: "p1Changed"
            Parameter { name: "arg"; type: "QPointF" }
        }
        Signal {
            name: "p2Changed"
            Parameter { name: "arg"; type: "QPointF" }
        }
        Signal {
            name: "p3Changed"
            Parameter { name: "arg"; type: "QPointF" }
        }
        Signal {
            name: "p4Changed"
            Parameter { name: "arg"; type: "QPointF" }
        }
        Method {
            name: "setP1"
            Parameter { name: "arg"; type: "QPointF" }
        }
        Method {
            name: "setP2"
            Parameter { name: "arg"; type: "QPointF" }
        }
        Method {
            name: "setP3"
            Parameter { name: "arg"; type: "QPointF" }
        }
        Method {
            name: "setP4"
            Parameter { name: "arg"; type: "QPointF" }
        }
    }
    Component {
        name: "DrawArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["PaintBoard 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "zoom"; type: "double" }
        Property { name: "viewportRect"; type: "QRectF"; isReadonly: true }
        Property { name: "viewportCenter"; type: "QPointF" }
        Property { name: "hoverPos"; type: "QPointF" }
        Signal {
            name: "viewportCenterChanged"
            Parameter { name: "viewportCenter"; type: "QPointF" }
        }
        Signal {
            name: "hoverPosChanged"
            Parameter { name: "hoverPos"; type: "QPointF" }
        }
    }
    Component {
        name: "DummyItemHandle"
        prototype: "VisualInstanceHandle"
        exports: ["DummyItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "pen"; type: "GPen" }
    }
    Component {
        name: "GBrush"
        exports: ["GBrush 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "style"; type: "Qt::BrushStyle" }
    }
    Component {
        name: "GPen"
        exports: ["GPen 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "width"; type: "double" }
        Property { name: "color"; type: "QColor" }
        Property { name: "cosmetic"; type: "bool" }
        Property { name: "strokeStyle"; type: "Qt::PenStyle" }
        Property { name: "joinStyle"; type: "Qt::PenJoinStyle" }
        Property { name: "capStyle"; type: "Qt::PenCapStyle" }
        Property { name: "dashOffset"; type: "double" }
        Method { name: "clone" }
    }
    Component {
        name: "GraphicsSceneHoverEvent"
        exports: ["GraphicsSceneHoverEvent 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "modifiers"; type: "Qt::KeyboardModifiers"; isReadonly: true }
        Property { name: "pos"; type: "QPointF"; isReadonly: true }
        Property { name: "scenePos"; type: "QPointF"; isReadonly: true }
        Property { name: "screenPos"; type: "QPointF"; isReadonly: true }
        Property { name: "lastPos"; type: "QPointF"; isReadonly: true }
        Property { name: "lastScenePos"; type: "QPointF"; isReadonly: true }
        Property { name: "lastScreenPos"; type: "QPointF"; isReadonly: true }
    }
    Component {
        name: "GraphicsSceneMouseEvent"
        exports: ["GraphicsSceneMouseEvent 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "modifiers"; type: "Qt::KeyboardModifiers"; isReadonly: true }
        Property { name: "buttons"; type: "Qt::MouseButtons"; isReadonly: true }
        Property { name: "button"; type: "Qt::MouseButton"; isReadonly: true }
        Property { name: "pos"; type: "QPointF"; isReadonly: true }
        Property { name: "scenePos"; type: "QPointF"; isReadonly: true }
        Property { name: "screenPos"; type: "QPointF"; isReadonly: true }
        Property { name: "lastPos"; type: "QPointF"; isReadonly: true }
        Property { name: "lastScenePos"; type: "QPointF"; isReadonly: true }
        Property { name: "lastScreenPos"; type: "QPointF"; isReadonly: true }
        Property { name: "accepted"; type: "bool" }
    }
    Component {
        name: "GraphicsSceneWheelEvent"
        exports: ["GraphicsSceneWheelEvent 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "modifiers"; type: "Qt::KeyboardModifiers"; isReadonly: true }
        Property { name: "pos"; type: "QPointF"; isReadonly: true }
        Property { name: "scenePos"; type: "QPointF"; isReadonly: true }
        Property { name: "screenPos"; type: "QPointF"; isReadonly: true }
        Property { name: "buttons"; type: "Qt::MouseButtons"; isReadonly: true }
        Property { name: "delta"; type: "int"; isReadonly: true }
        Property { name: "orientation"; type: "Qt::Orientation"; isReadonly: true }
    }
    Component {
        name: "GuidePath"
        exports: ["GuidePath 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "length"; type: "double"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "empty"; type: "bool"; isReadonly: true }
        Property { name: "headPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "tailPoint"; type: "QPointF"; isReadonly: true }
        Method {
            name: "setRunner"
            type: "PathRunner"
            Parameter { name: "pos"; type: "double" }
        }
        Method {
            name: "appendPoint"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "appendPath"
            Parameter { name: "other"; type: "GuidePath" }
        }
        Method {
            name: "setPolygon"
            Parameter { name: "polygon"; type: "QPolygonF" }
        }
        Method { name: "clone"; type: "GuidePath" }
        Method {
            name: "part"
            type: "GuidePath"
            Parameter { name: "start"; type: "double" }
            Parameter { name: "end"; type: "double" }
        }
        Method {
            name: "findNearestPos"
            type: "PathRunner"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method { name: "clear" }
        Method {
            name: "wavefront"
            type: "GuidePath"
            Parameter { name: "offset"; type: "double" }
        }
        Method {
            name: "wavefront_debug"
            type: "QPainterPath"
            Parameter { name: "offset"; type: "double" }
        }
        Method {
            name: "smoothed"
            type: "GuidePath"
            Parameter { name: "radius"; type: "double" }
            Parameter { name: "precision"; type: "double" }
            Parameter { name: "startPos"; type: "double" }
            Parameter { name: "endPos"; type: "double" }
        }
        Method {
            name: "smoothed"
            type: "GuidePath"
            Parameter { name: "radius"; type: "double" }
            Parameter { name: "precision"; type: "double" }
            Parameter { name: "startPos"; type: "double" }
        }
        Method {
            name: "smoothed"
            type: "GuidePath"
            Parameter { name: "radius"; type: "double" }
            Parameter { name: "precision"; type: "double" }
        }
        Method {
            name: "simplified"
            type: "GuidePath"
            Parameter { name: "threshold"; type: "double" }
            Parameter { name: "range"; type: "double" }
        }
        Method { name: "reversed"; type: "GuidePath" }
        Method {
            name: "offseted"
            type: "GuidePath"
            Parameter { name: "offset"; type: "double" }
            Parameter { name: "fast"; type: "bool" }
        }
        Method {
            name: "offseted"
            type: "GuidePath"
            Parameter { name: "offset"; type: "double" }
        }
        Method {
            name: "outline"
            type: "QPainterPath"
            Parameter { name: "width"; type: "double" }
            Parameter { name: "caps"; type: "Qt::PenCapStyle" }
        }
        Method { name: "toPath"; type: "QPainterPath" }
        Method { name: "toPolygon"; type: "QPolygonF" }
        Method { name: "boundingRect"; type: "QRectF" }
        Method { name: "headNode" }
        Method { name: "tailNode" }
        Method { name: "begin"; type: "PathIterator" }
        Method { name: "head"; type: "PathIterator" }
        Method { name: "first"; type: "PathIterator" }
        Method { name: "last"; type: "PathIterator" }
        Method { name: "tail"; type: "PathIterator" }
        Method { name: "end"; type: "PathIterator" }
        Method { name: "pathData"; type: "QVariant" }
        Method {
            name: "setPathData"
            Parameter { name: "pathData"; type: "QVariant" }
        }
        Method { name: "tailData"; type: "QVariant" }
        Method {
            name: "setTailData"
            Parameter { name: "tailData"; type: "QVariant" }
        }
        Method { name: "headData"; type: "QVariant" }
        Method {
            name: "setHeadData"
            Parameter { name: "headData"; type: "QVariant" }
        }
    }
    Component {
        name: "GuidePathSmoother"
        exports: ["GuidePathSmoother 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "GuidePath" }
        Property { name: "radius"; type: "double" }
        Property { name: "precision"; type: "double" }
        Property { name: "startPos"; type: "double" }
        Property { name: "endPos"; type: "double" }
        Property { name: "result"; type: "GuidePath"; isReadonly: true }
        Method { name: "update" }
    }
    Component {
        name: "GuidePathStrokeHandle"
        prototype: "AbstractGuideItemHandle"
        exports: ["GuidePathStroke 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "pen"; type: "GPen" }
        Property { name: "sourcePen"; type: "GPen" }
        Property { name: "drawResult"; type: "bool" }
        Property { name: "drawSource"; type: "bool" }
        Property { name: "sourceStrokeStart"; type: "double" }
        Property { name: "sourceStrokeEnd"; type: "double" }
        Property { name: "strokeStart"; type: "double" }
        Property { name: "strokeEnd"; type: "double" }
        Method {
            name: "setDebugMode"
            Parameter { name: "debug"; type: "bool" }
        }
    }
    Component {
        name: "GuidePathTextHandle"
        prototype: "VisualInstanceHandle"
        exports: ["GuidePathText 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "outlineColor"; type: "QColor" }
        Property { name: "orientation"; type: "Qt::Orientation" }
        Property { name: "position"; type: "double" }
        Property { name: "path"; type: "GuidePath" }
    }
    Component {
        name: "PainterPath"
        exports: ["PainterPath 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "deserialize"
            Parameter { name: "ba"; type: "QByteArray" }
        }
        Method { name: "deserialize"; type: "QByteArray" }
        Method { name: "closeSubpath" }
        Method {
            name: "moveTo"
            Parameter { name: "p"; type: "QPointF" }
        }
        Method {
            name: "moveTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "lineTo"
            Parameter { name: "p"; type: "QPointF" }
        }
        Method {
            name: "lineTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "arcMoveTo"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "angle"; type: "double" }
        }
        Method {
            name: "arcMoveTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
            Parameter { name: "angle"; type: "double" }
        }
        Method {
            name: "arcTo"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "startAngle"; type: "double" }
            Parameter { name: "arcLength"; type: "double" }
        }
        Method {
            name: "arcTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
            Parameter { name: "startAngle"; type: "double" }
            Parameter { name: "arcLength"; type: "double" }
        }
        Method {
            name: "cubicTo"
            Parameter { name: "ctrlPt1"; type: "QPointF" }
            Parameter { name: "ctrlPt2"; type: "QPointF" }
            Parameter { name: "endPt"; type: "QPointF" }
        }
        Method {
            name: "cubicTo"
            Parameter { name: "ctrlPt1x"; type: "double" }
            Parameter { name: "ctrlPt1y"; type: "double" }
            Parameter { name: "ctrlPt2x"; type: "double" }
            Parameter { name: "ctrlPt2y"; type: "double" }
            Parameter { name: "endPtx"; type: "double" }
            Parameter { name: "endPty"; type: "double" }
        }
        Method {
            name: "quadTo"
            Parameter { name: "ctrlPt"; type: "QPointF" }
            Parameter { name: "endPt"; type: "QPointF" }
        }
        Method {
            name: "quadTo"
            Parameter { name: "ctrlPtx"; type: "double" }
            Parameter { name: "ctrlPty"; type: "double" }
            Parameter { name: "endPtx"; type: "double" }
            Parameter { name: "endPty"; type: "double" }
        }
        Method { name: "currentPosition"; type: "QPointF" }
        Method {
            name: "addRect"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "addRect"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "addEllipse"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "addEllipse"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "addEllipse"
            Parameter { name: "center"; type: "QPointF" }
            Parameter { name: "rx"; type: "double" }
            Parameter { name: "ry"; type: "double" }
        }
        Method {
            name: "addPolygon"
            Parameter { name: "polygon"; type: "QPolygonF" }
        }
        Method {
            name: "addText"
            Parameter { name: "point"; type: "QPointF" }
            Parameter { name: "f"; type: "QFont" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "addText"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "f"; type: "QFont" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "addPath"
            Parameter { name: "path"; type: "QPainterPath" }
        }
        Method {
            name: "addRegion"
            Parameter { name: "region"; type: "QRegion" }
        }
        Method {
            name: "addRoundedRect"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "xRadius"; type: "double" }
            Parameter { name: "yRadius"; type: "double" }
            Parameter { name: "mode"; type: "Qt::SizeMode" }
        }
        Method {
            name: "addRoundedRect"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "xRadius"; type: "double" }
            Parameter { name: "yRadius"; type: "double" }
        }
        Method {
            name: "addRoundedRect"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
            Parameter { name: "xRadius"; type: "double" }
            Parameter { name: "yRadius"; type: "double" }
            Parameter { name: "mode"; type: "Qt::SizeMode" }
        }
        Method {
            name: "addRoundedRect"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
            Parameter { name: "xRadius"; type: "double" }
            Parameter { name: "yRadius"; type: "double" }
        }
        Method {
            name: "addRoundRect"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "xRnd"; type: "int" }
            Parameter { name: "yRnd"; type: "int" }
        }
        Method {
            name: "addRoundRect"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
            Parameter { name: "xRnd"; type: "int" }
            Parameter { name: "yRnd"; type: "int" }
        }
        Method {
            name: "addRoundRect"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "roundness"; type: "int" }
        }
        Method {
            name: "addRoundRect"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
            Parameter { name: "roundness"; type: "int" }
        }
        Method {
            name: "connectPath"
            Parameter { name: "path"; type: "QPainterPath" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "pt"; type: "QPointF" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "intersects"
            type: "bool"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "translate"
            Parameter { name: "dx"; type: "double" }
            Parameter { name: "dy"; type: "double" }
        }
        Method {
            name: "translate"
            Parameter { name: "offset"; type: "QPointF" }
        }
        Method {
            name: "translated"
            type: "QPainterPath"
            Parameter { name: "dx"; type: "double" }
            Parameter { name: "dy"; type: "double" }
        }
        Method {
            name: "translated"
            type: "QPainterPath"
            Parameter { name: "offset"; type: "QPointF" }
        }
        Method { name: "boundingRect"; type: "QRectF" }
        Method { name: "controlPointRect"; type: "QRectF" }
        Method { name: "fillRule"; type: "Qt::FillRule" }
        Method {
            name: "setFillRule"
            Parameter { name: "fillRule"; type: "Qt::FillRule" }
        }
        Method { name: "isEmpty"; type: "bool" }
        Method { name: "toReversed"; type: "QPainterPath" }
        Method {
            name: "toSubpathPolygons"
            type: "QList<QPolygonF>"
            Parameter { name: "matrix"; type: "QMatrix" }
        }
        Method { name: "toSubpathPolygons"; type: "QList<QPolygonF>" }
        Method {
            name: "toFillPolygons"
            type: "QList<QPolygonF>"
            Parameter { name: "matrix"; type: "QMatrix" }
        }
        Method { name: "toFillPolygons"; type: "QList<QPolygonF>" }
        Method {
            name: "toFillPolygon"
            type: "QPolygonF"
            Parameter { name: "matrix"; type: "QMatrix" }
        }
        Method { name: "toFillPolygon"; type: "QPolygonF" }
        Method {
            name: "toSubpathPolygons"
            type: "QList<QPolygonF>"
            Parameter { name: "matrix"; type: "QTransform" }
        }
        Method {
            name: "toFillPolygons"
            type: "QList<QPolygonF>"
            Parameter { name: "matrix"; type: "QTransform" }
        }
        Method {
            name: "toFillPolygon"
            type: "QPolygonF"
            Parameter { name: "matrix"; type: "QTransform" }
        }
        Method { name: "elementCount"; type: "int" }
        Method {
            name: "elementAt"
            type: "QPainterPath::Element"
            Parameter { name: "i"; type: "int" }
        }
        Method {
            name: "setElementPositionAt"
            Parameter { name: "i"; type: "int" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method { name: "length"; type: "double" }
        Method {
            name: "percentAtLength"
            type: "double"
            Parameter { name: "t"; type: "double" }
        }
        Method {
            name: "pointAtPercent"
            type: "QPointF"
            Parameter { name: "t"; type: "double" }
        }
        Method {
            name: "angleAtPercent"
            type: "double"
            Parameter { name: "t"; type: "double" }
        }
        Method {
            name: "slopeAtPercent"
            type: "double"
            Parameter { name: "t"; type: "double" }
        }
        Method {
            name: "intersects"
            type: "bool"
            Parameter { name: "p"; type: "QPainterPath" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "p"; type: "QPainterPath" }
        }
        Method {
            name: "united"
            type: "QPainterPath"
            Parameter { name: "r"; type: "QPainterPath" }
        }
        Method {
            name: "intersected"
            type: "QPainterPath"
            Parameter { name: "r"; type: "QPainterPath" }
        }
        Method {
            name: "subtracted"
            type: "QPainterPath"
            Parameter { name: "r"; type: "QPainterPath" }
        }
        Method {
            name: "subtractedInverted"
            type: "QPainterPath"
            Parameter { name: "r"; type: "QPainterPath" }
        }
        Method { name: "simplified"; type: "QPainterPath" }
    }
    Component {
        name: "PathItemHandle"
        prototype: "ShapeInstanceHandle"
        exports: ["PathItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "QPainterPath" }
        Property { name: "fillRule"; type: "Qt::FillRule" }
        Method {
            name: "setBlob"
            Parameter { name: "ba"; type: "QByteArray" }
        }
    }
    Component {
        name: "PathNode"
        Enum {
            name: "NodeType"
            values: {
                "InvalidNode": 0,
                "VectorType": 1,
                "PointType": 2,
                "HeadType": 6,
                "TailType": 10
            }
        }
        Property { name: "type"; type: "NodeType"; isReadonly: true }
    }
    Component {
        name: "PathRunner"
        exports: ["PathRunner 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "position"; type: "double" }
        Property { name: "point"; type: "QPointF"; isReadonly: true }
        Property { name: "atVertex"; type: "bool"; isReadonly: true }
        Property { name: "atStart"; type: "bool"; isReadonly: true }
        Property { name: "atEnd"; type: "bool"; isReadonly: true }
        Property { name: "atPoint"; type: "bool"; isReadonly: true }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "angle"; type: "double"; isReadonly: true }
        Property { name: "turnAngle"; type: "double"; isReadonly: true }
        Property { name: "vectorLengthAhead"; type: "double"; isReadonly: true }
        Property { name: "vectorLengthBehind"; type: "double"; isReadonly: true }
        Method { name: "currentNode"; type: "QVariant" }
        Method { name: "currentUserData"; type: "QVariant" }
        Method { name: "vectorLengthAhead"; type: "double" }
        Method { name: "vectorLengthBehind"; type: "double" }
        Method { name: "hopForward"; type: "double" }
        Method { name: "hopBack"; type: "double" }
        Method {
            name: "moveForward"
            type: "double"
            Parameter { name: "len"; type: "double" }
        }
        Method {
            name: "moveBack"
            type: "double"
            Parameter { name: "len"; type: "double" }
        }
        Method {
            name: "negativePart"
            type: "QPolygonF"
            Parameter { name: "length"; type: "double" }
        }
        Method {
            name: "positivePart"
            type: "QPolygonF"
            Parameter { name: "length"; type: "double" }
        }
        Method {
            name: "debugRounding"
            type: "QVariantMap"
            Parameter { name: "range"; type: "double" }
        }
    }
    Component {
        name: "PointItemHandle"
        prototype: "ShapeInstanceHandle"
        exports: ["PointItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "point"; type: "QPointF" }
    }
    Component {
        name: "PointRef"
        exports: ["PointRef 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "point"; type: "QPointF" }
    }
    Component {
        name: "PolygonFactory"
        prototype: "QObject"
        exports: ["PolygonFactory 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "model"; type: "QAbstractListModel"; isPointer: true }
        Property { name: "polygon"; type: "QPolygonF" }
        Property { name: "pointRole"; type: "string" }
        Property { name: "xRole"; type: "string" }
        Property { name: "yRole"; type: "string" }
        Signal {
            name: "modelChanged"
            Parameter { name: "model"; type: "QAbstractListModel"; isPointer: true }
        }
        Signal {
            name: "polygonChanged"
            Parameter { name: "polygon"; type: "QPolygonF" }
        }
        Signal {
            name: "pointRoleChanged"
            Parameter { name: "pointRole"; type: "string" }
        }
        Signal {
            name: "xRoleChanged"
            Parameter { name: "xRole"; type: "string" }
        }
        Signal {
            name: "yRoleChanged"
            Parameter { name: "yRole"; type: "string" }
        }
        Method { name: "buildPolygon" }
    }
    Component {
        name: "PolygonItemHandle"
        prototype: "ShapeInstanceHandle"
        exports: ["PolygonItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "polygon"; type: "QPolygonF" }
    }
    Component {
        name: "PolygonSmoother"
        prototype: "QObject"
        exports: ["PolygonSmoother 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "input"; type: "QPolygonF" }
        Property { name: "radius"; type: "double" }
        Property { name: "offset"; type: "double" }
        Property { name: "precision"; type: "double" }
        Property { name: "axis"; type: "QPolygonF"; isReadonly: true }
        Property { name: "output"; type: "QPolygonF"; isReadonly: true }
        Signal {
            name: "inputChanged"
            Parameter { name: "input"; type: "QPolygonF" }
        }
        Signal {
            name: "radiusChanged"
            Parameter { name: "radius"; type: "double" }
        }
        Signal {
            name: "outputChanged"
            Parameter { name: "output"; type: "QPolygonF" }
        }
        Signal {
            name: "offsetChanged"
            Parameter { name: "offset"; type: "double" }
        }
        Signal {
            name: "axisChanged"
            Parameter { name: "axis"; type: "QPolygonF" }
        }
        Signal {
            name: "precisionChanged"
            Parameter { name: "precision"; type: "double" }
        }
        Method { name: "update" }
    }
    Component {
        name: "QGraphicsScene"
        prototype: "QObject"
        exports: ["QGraphicsScene 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "backgroundBrush"; type: "QBrush" }
        Property { name: "foregroundBrush"; type: "QBrush" }
        Property { name: "itemIndexMethod"; type: "ItemIndexMethod" }
        Property { name: "sceneRect"; type: "QRectF" }
        Property { name: "bspTreeDepth"; type: "int" }
        Property { name: "palette"; type: "QPalette" }
        Property { name: "font"; type: "QFont" }
        Property { name: "sortCacheEnabled"; type: "bool" }
        Property { name: "stickyFocus"; type: "bool" }
        Property { name: "minimumRenderSize"; type: "double" }
        Signal {
            name: "changed"
            Parameter { name: "region"; type: "QList<QRectF>" }
        }
        Signal {
            name: "sceneRectChanged"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Signal { name: "selectionChanged" }
        Signal {
            name: "focusItemChanged"
            Parameter { name: "newFocus"; type: "QGraphicsItem"; isPointer: true }
            Parameter { name: "oldFocus"; type: "QGraphicsItem"; isPointer: true }
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "update"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method { name: "update" }
        Method {
            name: "invalidate"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "layers"; type: "SceneLayers" }
        }
        Method {
            name: "invalidate"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method { name: "invalidate" }
        Method { name: "advance" }
        Method { name: "clearSelection" }
        Method { name: "clear" }
    }
    Component {
        name: "Scene"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Scene 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sceneItems"; type: "SceneItem"; isList: true; isReadonly: true }
        Property { name: "selectedItems"; type: "SceneItem"; isList: true; isReadonly: true }
        Property { name: "sceneRect"; type: "QRectF" }
        Property { name: "viewport"; type: "QQuickItem"; isPointer: true }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "renderer"; type: "SceneRenderer"; isReadonly: true; isPointer: true }
        Property { name: "autoUpdate"; type: "bool" }
        Property { name: "viewTransform"; type: "QTransform"; isReadonly: true }
        Property { name: "viewportScale"; type: "double"; isReadonly: true }
        Property { name: "viewportRect"; type: "QRectF"; isReadonly: true }
        Property { name: "enableBsp"; type: "bool" }
        Property { name: "bspTreeDepth"; type: "int" }
        Property { name: "qGraphicsScene"; type: "QGraphicsScene"; isReadonly: true; isPointer: true }
        Property { name: "notifyViewTransformUpdates"; type: "bool" }
        Signal {
            name: "itemAdded"
            Parameter { name: "item"; type: "SceneItem"; isPointer: true }
        }
        Signal {
            name: "itemRemoved"
            Parameter { name: "item"; type: "SceneItem"; isPointer: true }
        }
        Signal {
            name: "sceneRectChanged"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Signal { name: "selectionChanged" }
        Signal { name: "changed" }
        Signal {
            name: "viewTransformChanged"
            Parameter { name: "viewTransform"; type: "QTransform" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "rendererChanged"
            Parameter { name: "arg"; type: "SceneRenderer"; isPointer: true }
        }
        Signal {
            name: "autoUpdateChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "viewportRectChanged"
            Parameter { name: "arg"; type: "QRectF" }
        }
        Signal {
            name: "enableBspChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "bspTreeDepthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "viewportScaleChanged"
            Parameter { name: "viewportScale"; type: "double" }
        }
        Signal {
            name: "rendererScaleChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "notifyViewTransformUpdatesChanged"
            Parameter { name: "notifyViewTransformUpdates"; type: "bool" }
        }
        Method {
            name: "addItem"
            Parameter { name: "item"; type: "SceneItem"; isPointer: true }
        }
        Method {
            name: "removeItem"
            Parameter { name: "item"; type: "SceneItem"; isPointer: true }
        }
        Method {
            name: "setSceneRect"
            Parameter { name: "arg"; type: "QRectF" }
        }
        Method { name: "clearSelection" }
        Method {
            name: "setSelectionArea"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "mode"; type: "Qt::ItemSelectionMode" }
        }
        Method {
            name: "setSelectionArea"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "setSelectionArea"
            Parameter { name: "path"; type: "GraphicsPath"; isPointer: true }
            Parameter { name: "mode"; type: "Qt::ItemSelectionMode" }
        }
        Method {
            name: "setSelectionArea"
            Parameter { name: "path"; type: "GraphicsPath"; isPointer: true }
        }
        Method { name: "onRendererScaleShanged" }
        Method {
            name: "setViewport"
            Parameter { name: "arg"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setAntialiasing"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setAutoUpdate"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setEnableBsp"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setBspTreeDepth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "itemAt"
            type: "SceneItem*"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method {
            name: "itemAt"
            type: "SceneItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        name: "SceneItemStroker"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: ["SceneItemStroker 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "scene"; type: "Scene"; isPointer: true }
        Signal {
            name: "sceneChanged"
            Parameter { name: "arg"; type: "Scene"; isPointer: true }
        }
        Method {
            name: "setScene"
            Parameter { name: "arg"; type: "Scene"; isPointer: true }
        }
        Method { name: "updateShape" }
    }
    Component {
        name: "SceneModel"
        prototype: "QAbstractItemModel"
        exports: ["SceneModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InstantiationMode"
            values: {
                "None": 1,
                "Node": 2,
                "Children": 4,
                "Tree": 8
            }
        }
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "index"; type: "QModelIndex" }
        Property { name: "typeRole"; type: "string" }
        Property { name: "valueRole"; type: "string" }
        Property { name: "mode"; type: "InstantiationMode" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "scene"; type: "QGraphicsScene"; isPointer: true }
        Property { name: "roleBindings"; type: "QQmlPropertyMap"; isReadonly: true; isPointer: true }
        Signal { name: "modelChanged" }
        Signal {
            name: "typeRoleChanged"
            Parameter { name: "typeRole"; type: "string" }
        }
        Signal {
            name: "valueRoleChanged"
            Parameter { name: "valueRole"; type: "string" }
        }
        Signal {
            name: "objectAdded"
            Parameter { name: "object"; type: "QVariant" }
            Parameter { name: "parent"; type: "QVariant" }
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "objectRemoved"
            Parameter { name: "object"; type: "QVariant" }
            Parameter { name: "parent"; type: "QVariant" }
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "objectsMoved"
            Parameter { name: "source"; type: "QVariant" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
            Parameter { name: "destination"; type: "QVariant" }
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "indexChanged"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "modeChanged"
            Parameter { name: "mode"; type: "InstantiationMode" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "instance"; type: "QVariant" }
        }
        Signal {
            name: "sourceModelChanged"
            Parameter { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method { name: "tryBind"; type: "bool" }
        Method { name: "clearRoleBindings" }
        Method {
            name: "addItem"
            type: "QVariant"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "params"; type: "QVariantMap" }
            Parameter { name: "parent"; type: "QVariant" }
        }
        Method {
            name: "addItem"
            type: "QVariant"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "params"; type: "QVariantMap" }
        }
        Method {
            name: "addItem"
            type: "QVariant"
            Parameter { name: "type"; type: "string" }
        }
        Method {
            name: "instance"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
    }
    Component {
        name: "SceneRenderer"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: ["SceneRenderer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "scene"; type: "Scene"; isPointer: true }
        Property { name: "sceneRect"; type: "QRectF" }
        Property { name: "antialiasing"; type: "bool" }
        Signal {
            name: "sceneChanged"
            Parameter { name: "arg"; type: "Scene"; isPointer: true }
        }
        Signal {
            name: "sceneRectChanged"
            Parameter { name: "arg"; type: "QRectF" }
        }
    }
    Component {
        name: "ShapeInstanceHandle"
        prototype: "VisualInstanceHandle"
        exports: ["ShapeInstance 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ShapeType"
            values: {
                "Invalid": 0,
                "Linear": 1,
                "Polygonal": 2
            }
        }
        Property { name: "pen"; type: "GPen" }
        Property { name: "brush"; type: "GBrush" }
        Property { name: "shapeType"; type: "int" }
    }
    Component {
        name: "VectorNode"
        prototype: "PathNode"
        exports: ["VectorNode 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "unitVector"; type: "QPointF"; isReadonly: true }
    }
    Component {
        name: "VertexNode"
        prototype: "PathNode"
        exports: ["HeadNode 1.0", "TailNode 1.0", "VertexNode 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0, 0, 0]
        Property { name: "point"; type: "QPointF" }
        Property { name: "position"; type: "double" }
        Property { name: "userData"; type: "QVariant" }
    }
    Component {
        name: "VisualInstanceHandle"
        exports: ["VisualInstance 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "VisualInstanceFlag"
            values: {
                "ItemIsMovable": 1,
                "ItemIsSelectable": 2,
                "ItemIsFocusable": 4,
                "ItemClipsToShape": 8,
                "ItemClipsChildrenToShape": 16,
                "ItemIgnoresParentOpacity": 64,
                "ItemDoesntPropagateOpacityToChildren": 128,
                "ItemStacksBehindParent": 256,
                "ItemUsesExtendedStyleOption": 512,
                "ItemHasNoContents": 1024,
                "ItemSendsGeometryChanges": 2048,
                "ItemAcceptsInputMethod": 4096,
                "ItemNegativeZStacksBehindParent": 8192,
                "ItemSendsScenePositionChanges": 65536,
                "ItemStopsClickFocusPropagation": 131072,
                "ItemStopsFocusHandling": 262144,
                "ItemPositionSnapsToGrid": 1048576,
                "ItemRectSnapsToGrid": 2097152,
                "ItemIgnoresTransformations": 4194304,
                "ItemPixelAligned": 8388608,
                "NoSelectionOutline": 16777216,
                "DrGraphicsFlagsMask": -1048576
            }
        }
        Enum {
            name: "VisualInstanceFlags"
            values: {
                "ItemIsMovable": 1,
                "ItemIsSelectable": 2,
                "ItemIsFocusable": 4,
                "ItemClipsToShape": 8,
                "ItemClipsChildrenToShape": 16,
                "ItemIgnoresParentOpacity": 64,
                "ItemDoesntPropagateOpacityToChildren": 128,
                "ItemStacksBehindParent": 256,
                "ItemUsesExtendedStyleOption": 512,
                "ItemHasNoContents": 1024,
                "ItemSendsGeometryChanges": 2048,
                "ItemAcceptsInputMethod": 4096,
                "ItemNegativeZStacksBehindParent": 8192,
                "ItemSendsScenePositionChanges": 65536,
                "ItemStopsClickFocusPropagation": 131072,
                "ItemStopsFocusHandling": 262144,
                "ItemPositionSnapsToGrid": 1048576,
                "ItemRectSnapsToGrid": 2097152,
                "ItemIgnoresTransformations": 4194304,
                "ItemPixelAligned": 8388608,
                "NoSelectionOutline": 16777216,
                "DrGraphicsFlagsMask": -1048576
            }
        }
        Enum {
            name: "GraphicsItemChange"
            values: {
                "ItemPositionChange": 0,
                "ItemMatrixChange": 1,
                "ItemVisibleChange": 2,
                "ItemEnabledChange": 3,
                "ItemSelectedChange": 4,
                "ItemParentChange": 5,
                "ItemChildAddedChange": 6,
                "ItemChildRemovedChange": 7,
                "ItemTransformChange": 8,
                "ItemPositionHasChanged": 9,
                "ItemTransformHasChanged": 10,
                "ItemSceneChange": 11,
                "ItemVisibleHasChanged": 12,
                "ItemEnabledHasChanged": 13,
                "ItemSelectedHasChanged": 14,
                "ItemParentHasChanged": 15,
                "ItemSceneHasChanged": 16,
                "ItemCursorChange": 17,
                "ItemCursorHasChanged": 18,
                "ItemToolTipChange": 19,
                "ItemToolTipHasChanged": 20,
                "ItemFlagsChange": 21,
                "ItemFlagsHaveChanged": 22,
                "ItemZValueChange": 23,
                "ItemZValueHasChanged": 24,
                "ItemOpacityChange": 25,
                "ItemOpacityHasChanged": 26,
                "ItemScenePositionHasChanged": 27,
                "ItemRotationChange": 28,
                "ItemRotationHasChanged": 29,
                "ItemScaleChange": 30,
                "ItemScaleHasChanged": 31,
                "ItemTransformOriginPointChange": 32,
                "ItemTransformOriginPointHasChanged": 33
            }
        }
        Property { name: "boudingRect"; type: "QRectF"; isReadonly: true }
        Property { name: "position"; type: "QPointF" }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOriginPoint"; type: "QPointF" }
        Property { name: "opacity"; type: "double" }
        Property { name: "visible"; type: "bool" }
        Property { name: "hoverEnabled"; type: "bool" }
        Property { name: "selected"; type: "bool" }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "acceptedButtons"; type: "Qt::MouseButtons" }
        Property { name: "childItems"; type: "QVariantList"; isReadonly: true }
        Property { name: "parentItem"; type: "VisualInstanceHandle" }
        Property { name: "flags"; type: "int" }
        Property { name: "onMousePress"; type: "QJSValue" }
        Property { name: "onMouseRelease"; type: "QJSValue" }
        Property { name: "onMouseMove"; type: "QJSValue" }
        Property { name: "onHoverEnter"; type: "QJSValue" }
        Property { name: "onHoverLeave"; type: "QJSValue" }
        Property { name: "onHoverMove"; type: "QJSValue" }
        Property { name: "cacheMode"; type: "int" }
        Property { name: "modelIndex"; type: "QPersistentModelIndex"; isReadonly: true }
        Method { name: "update" }
        Method { name: "destroy" }
        Method {
            name: "bind"
            type: "bool"
            Parameter { name: "change"; type: "GraphicsItemChange" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "mapFromItem"
            type: "QPointF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            type: "QPolygonF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapFromItem"
            type: "QPolygonF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "polygon"; type: "QPolygonF" }
        }
        Method {
            name: "mapFromItem"
            type: "QPainterPath"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "path"; type: "QPainterPath" }
        }
        Method {
            name: "mapFromItem"
            type: "QPolygonF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapFromItem"
            type: "QPointF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "mapFromParent"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromParent"
            type: "QPolygonF"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapFromParent"
            type: "QPolygonF"
            Parameter { name: "polygon"; type: "QPolygonF" }
        }
        Method {
            name: "mapFromParent"
            type: "QPainterPath"
            Parameter { name: "path"; type: "QPainterPath" }
        }
        Method {
            name: "mapFromParent"
            type: "QPolygonF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapFromParent"
            type: "QPointF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "mapFromScene"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromScene"
            type: "QPolygonF"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapFromScene"
            type: "QPolygonF"
            Parameter { name: "polygon"; type: "QPolygonF" }
        }
        Method {
            name: "mapFromScene"
            type: "QPainterPath"
            Parameter { name: "path"; type: "QPainterPath" }
        }
        Method {
            name: "mapFromScene"
            type: "QPolygonF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapFromScene"
            type: "QPointF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "mapRectFromItem"
            type: "QRectF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapRectFromItem"
            type: "QRectF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapRectFromParent"
            type: "QRectF"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapRectFromParent"
            type: "QRectF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapRectFromScene"
            type: "QRectF"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapRectFromScene"
            type: "QRectF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapRectToItem"
            type: "QRectF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapRectToItem"
            type: "QRectF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapRectToParent"
            type: "QRectF"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapRectToParent"
            type: "QRectF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapRectToScene"
            type: "QRectF"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapRectToScene"
            type: "QRectF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapToItem"
            type: "QPointF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapToItem"
            type: "QPolygonF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapToItem"
            type: "QPolygonF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "polygon"; type: "QPolygonF" }
        }
        Method {
            name: "mapToItem"
            type: "QPainterPath"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "path"; type: "QPainterPath" }
        }
        Method {
            name: "mapToItem"
            type: "QPolygonF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapToItem"
            type: "QPointF"
            Parameter { name: "item"; type: "VisualInstanceHandle" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "mapToParent"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapToParent"
            type: "QPolygonF"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapToParent"
            type: "QPolygonF"
            Parameter { name: "polygon"; type: "QPolygonF" }
        }
        Method {
            name: "mapToParent"
            type: "QPainterPath"
            Parameter { name: "path"; type: "QPainterPath" }
        }
        Method {
            name: "mapToParent"
            type: "QPolygonF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapToParent"
            type: "QPointF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "mapToScene"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapToScene"
            type: "QPolygonF"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "mapToScene"
            type: "QPolygonF"
            Parameter { name: "polygon"; type: "QPolygonF" }
        }
        Method {
            name: "mapToScene"
            type: "QPainterPath"
            Parameter { name: "path"; type: "QPainterPath" }
        }
        Method {
            name: "mapToScene"
            type: "QPolygonF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method {
            name: "mapToScene"
            type: "QPointF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        prototype: "QQuickWindowQmlImpl"
        name: "QtQuick.Controls/ApplicationWindow"
        exports: ["QtQuick.Controls/ApplicationWindow 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "menuBar"; type: "MenuBar_QMLTYPE_11"; isPointer: true }
        Property { name: "toolBar"; type: "QQuickItem"; isPointer: true }
        Property { name: "statusBar"; type: "QQuickItem"; isPointer: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__topBottomMargins"; type: "double" }
        Property { name: "__qwindowsize_max"; type: "double"; isReadonly: true }
        Property { name: "__width"; type: "double" }
        Property { name: "__height"; type: "double" }
        Property { name: "contentItem"; type: "ContentItem_QMLTYPE_9"; isReadonly: true; isPointer: true }
        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "__panel"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/BusyIndicator"
        exports: ["QtQuick.Controls/BusyIndicator 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "running"; type: "bool" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/Button"
        exports: ["QtQuick.Controls/Button 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_56"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "action"; type: "QQuickAction"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/Calendar"
        exports: ["QtQuick.Controls/Calendar 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "data"
        Property { name: "visibleMonth"; type: "int" }
        Property { name: "visibleYear"; type: "int" }
        Property { name: "frameVisible"; type: "bool" }
        Property { name: "weekNumbersVisible"; type: "bool" }
        Property { name: "navigationBarVisible"; type: "bool" }
        Property { name: "dayOfWeekFormat"; type: "int" }
        Property { name: "__model"; type: "QQuickCalendarModel"; isPointer: true }
        Property { name: "__locale"; type: "QVariant" }
        Property { name: "selectedDate"; type: "QDate" }
        Property { name: "minimumDate"; type: "QDate" }
        Property { name: "maximumDate"; type: "QDate" }
        Signal {
            name: "hovered"
            Parameter { name: "date"; type: "QDateTime" }
        }
        Signal {
            name: "pressed"
            Parameter { name: "date"; type: "QDateTime" }
        }
        Signal {
            name: "released"
            Parameter { name: "date"; type: "QDateTime" }
        }
        Signal {
            name: "clicked"
            Parameter { name: "date"; type: "QDateTime" }
        }
        Signal {
            name: "doubleClicked"
            Parameter { name: "date"; type: "QDateTime" }
        }
        Signal {
            name: "pressAndHold"
            Parameter { name: "date"; type: "QDateTime" }
        }
        Method { name: "showPreviousMonth"; type: "QVariant" }
        Method { name: "showNextMonth"; type: "QVariant" }
        Method { name: "showPreviousYear"; type: "QVariant" }
        Method { name: "showNextYear"; type: "QVariant" }
        Method { name: "__selectPreviousMonth"; type: "QVariant" }
        Method { name: "__selectNextMonth"; type: "QVariant" }
        Method { name: "__selectPreviousWeek"; type: "QVariant" }
        Method { name: "__selectNextWeek"; type: "QVariant" }
        Method { name: "__selectFirstDayOfMonth"; type: "QVariant" }
        Method { name: "__selectLastDayOfMonth"; type: "QVariant" }
        Method { name: "__selectPreviousDay"; type: "QVariant" }
        Method { name: "__selectNextDay"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/CheckBox"
        exports: ["QtQuick.Controls/CheckBox 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "checkedState"; type: "int" }
        Property { name: "partiallyCheckedEnabled"; type: "bool" }
        Property { name: "__ignoreChecked"; type: "bool" }
        Property { name: "__ignoreCheckedState"; type: "bool" }
        Method { name: "__cycleCheckBoxStates"; type: "QVariant" }
        Property { name: "checked"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "text"; type: "string" }
        Property { name: "__cycleStatesHandler"; type: "QVariant" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras.Private/CircularButton"
        exports: ["QtQuick.Extras.Private/CircularButton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_56"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "action"; type: "QQuickAction"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.Extras.Private/CircularButtonStyleHelper"
        exports: ["QtQuick.Extras.Private/CircularButtonStyleHelper 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
        Property { name: "buttonColorUpTop"; type: "QColor" }
        Property { name: "buttonColorUpBottom"; type: "QColor" }
        Property { name: "buttonColorDownTop"; type: "QColor" }
        Property { name: "buttonColorDownBottom"; type: "QColor" }
        Property { name: "outerArcColorTop"; type: "QColor" }
        Property { name: "outerArcColorBottom"; type: "QColor" }
        Property { name: "innerArcColorTop"; type: "QColor" }
        Property { name: "innerArcColorBottom"; type: "QColor" }
        Property { name: "innerArcColorBottomStop"; type: "double" }
        Property { name: "shineColor"; type: "QColor" }
        Property { name: "smallestAxis"; type: "double" }
        Property { name: "outerArcLineWidth"; type: "double" }
        Property { name: "innerArcLineWidth"; type: "double" }
        Property { name: "shineArcLineWidth"; type: "double" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "textColorUp"; type: "QColor" }
        Property { name: "textColorDown"; type: "QColor" }
        Property { name: "textRaisedColorUp"; type: "QColor" }
        Property { name: "textRaisedColorDown"; type: "QColor" }
        Property { name: "radius"; type: "double" }
        Property { name: "halfRadius"; type: "double" }
        Property { name: "outerArcRadius"; type: "double" }
        Property { name: "innerArcRadius"; type: "double" }
        Property { name: "shineArcRadius"; type: "double" }
        Property { name: "zeroAngle"; type: "double" }
        Property { name: "buttonColorTop"; type: "QColor" }
        Property { name: "buttonColorBottom"; type: "QColor" }
        Method {
            name: "toPixels"
            type: "QVariant"
            Parameter { name: "percentageOfSmallestAxis"; type: "QVariant" }
        }
        Method {
            name: "paintBackground"
            type: "QVariant"
            Parameter { name: "ctx"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/CircularGauge"
        exports: ["QtQuick.Extras/CircularGauge 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "tickmarksVisible"; type: "bool" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "value"; type: "double" }
        Property { name: "stepSize"; type: "double" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras.Private/CircularTickmarkLabel"
        exports: ["QtQuick.Extras.Private/CircularTickmarkLabel 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "minimumValueAngle"; type: "double" }
        Property { name: "maximumValueAngle"; type: "double" }
        Property { name: "angleRange"; type: "double"; isReadonly: true }
        Property { name: "tickmarkStepSize"; type: "double" }
        Property { name: "tickmarkInset"; type: "double" }
        Property { name: "tickmarkCount"; type: "int"; isReadonly: true }
        Property { name: "minorTickmarkCount"; type: "int" }
        Property { name: "minorTickmarkInset"; type: "double" }
        Property { name: "labelInset"; type: "double" }
        Property { name: "labelStepSize"; type: "double" }
        Property { name: "labelCount"; type: "int"; isReadonly: true }
        Property { name: "__tickmarkCount"; type: "double"; isReadonly: true }
        Property { name: "tickmarksVisible"; type: "bool" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "stepSize"; type: "double" }
        Method {
            name: "valueToAngle"
            type: "QVariant"
            Parameter { name: "value"; type: "QVariant" }
        }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickColorDialog"
        name: "QtQuick.Dialogs/ColorDialog"
        exports: ["QtQuick.Dialogs/ColorDialog 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentItem"
        Property { name: "__valueSet"; type: "bool" }
        Method { name: "__setControlsFromColor"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/ComboBox"
        exports: ["QtQuick.Controls/ComboBox 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "textRole"; type: "string" }
        Property { name: "editable"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectByMouse"; type: "bool" }
        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
        Property { name: "__popup"; type: "QVariant" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "currentText"; type: "string"; isReadonly: true }
        Property { name: "editText"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "validator"; type: "QValidator"; isPointer: true }
        Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
        Signal { name: "accepted" }
        Signal {
            name: "activated"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "textAt"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "find"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
        Method { name: "selectAll"; type: "QVariant" }
        Method { name: "__selectPrevItem"; type: "QVariant" }
        Method { name: "__selectNextItem"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/DelayButton"
        exports: ["QtQuick.Extras/DelayButton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "delay"; type: "int" }
        Property { name: "__progress"; type: "double" }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Signal { name: "activated" }
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_56"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "action"; type: "QQuickAction"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/Dial"
        exports: ["QtQuick.Extras/Dial 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "__wrap"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "tickmarksVisible"; type: "bool" }
        Property { name: "value"; type: "double" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "stepSize"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickDialog"
        name: "QtQuick.Dialogs/Dialog"
        exports: ["QtQuick.Dialogs/Dialog 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "data"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Method { name: "setupButtons"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFileDialog"
        name: "QtQuick.Dialogs/FileDialog"
        exports: ["QtQuick.Dialogs/FileDialog 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentItem"
        Property { name: "settings"; type: "QQmlSettings"; isPointer: true }
        Property { name: "showFocusHighlight"; type: "bool" }
        Property { name: "palette"; type: "QQuickSystemPalette"; isPointer: true }
        Property { name: "dirUpAction"; type: "QQuickAction"; isPointer: true }
        Property { name: "favoriteFolders"; type: "QVariant" }
        Method {
            name: "dirDown"
            type: "QVariant"
            Parameter { name: "path"; type: "QVariant" }
        }
        Method { name: "dirUp"; type: "QVariant" }
        Method { name: "acceptSelection"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFontDialog"
        name: "QtQuick.Dialogs/FontDialog"
        exports: ["QtQuick.Dialogs/FontDialog 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "contentItem"
        Property { name: "font"; type: "QFont" }
        Property { name: "currentFont"; type: "QFont" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/Gauge"
        exports: ["QtQuick.Extras/Gauge 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "orientation"; type: "int" }
        Property { name: "tickmarkAlignment"; type: "int" }
        Property { name: "__tickmarkAlignment"; type: "int" }
        Property { name: "__tickmarksInside"; type: "bool" }
        Property { name: "tickmarkStepSize"; type: "double" }
        Property { name: "minorTickmarkCount"; type: "int" }
        Property { name: "formatValue"; type: "QVariant" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "value"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "font"; type: "QFont" }
        Property { name: "__hiddenText"; type: "QQuickText"; isReadonly: true; isPointer: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/GroupBox"
        exports: ["QtQuick.Controls/GroupBox 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "__content"
        Property { name: "title"; type: "string" }
        Property { name: "flat"; type: "bool" }
        Property { name: "checkable"; type: "bool" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "checked"; type: "bool" }
        Property { name: "__content"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "__checkbox"; type: "CheckBox_QMLTYPE_82"; isReadonly: true; isPointer: true }
        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickText"
        name: "QtQuick.Controls/Label"
        exports: ["QtQuick.Controls/Label 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickMenu"
        name: "QtQuick.Controls/Menu"
        exports: ["QtQuick.Controls/Menu 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "__selfComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__usingDefaultStyle"; type: "bool" }
        Property { name: "__currentIndex"; type: "int" }
        Property { name: "__parentContentItem"; type: "QVariant" }
        Method {
            name: "addMenu"
            type: "QVariant"
            Parameter { name: "title"; type: "QVariant" }
        }
        Method {
            name: "insertMenu"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "title"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickMenuBar"
        name: "QtQuick.Controls/MenuBar"
        exports: ["QtQuick.Controls/MenuBar 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "menus"
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__menuBarComponent"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "QQuickMessageDialog"
        name: "QtQuick.Dialogs/MessageDialog"
        exports: ["QtQuick.Dialogs/MessageDialog 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "contentItem"
        Method { name: "calculateImplicitWidth"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/PieMenu"
        exports: ["QtQuick.Extras/PieMenu 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "menuItems"
        Property { name: "selectionAngle"; type: "double"; isReadonly: true }
        Property { name: "triggerMode"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "boundingItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__protectedScope"; type: "QObject"; isPointer: true }
        Property { name: "activationMode"; type: "int" }
        Property { name: "menuItems"; type: "QQuickMenuItem"; isList: true; isReadonly: true }
        Property { name: "currentIndex"; type: "int"; isReadonly: true }
        Property { name: "currentItem"; type: "QQuickMenuItem"; isReadonly: true; isPointer: true }
        Property { name: "__mouseThief"; type: "QQuickMouseThief"; isReadonly: true; isPointer: true }
        Method {
            name: "popup"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method {
            name: "addItem"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "insertItem"
            type: "QVariant"
            Parameter { name: "before"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "removeItem"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickLoader"
        name: "QtQuick.Extras.Private/PieMenuIcon"
        exports: ["QtQuick.Extras.Private/PieMenuIcon 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "PieMenu_QMLTYPE_264"; isPointer: true }
        Property { name: "styleData"; type: "QObject"; isPointer: true }
        Property { name: "iconSource"; type: "string"; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/ProgressBar"
        exports: ["QtQuick.Controls/ProgressBar 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "value"; type: "double" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "indeterminate"; type: "bool" }
        Property { name: "orientation"; type: "int" }
        Property { name: "__initialized"; type: "bool" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Method {
            name: "setValue"
            type: "QVariant"
            Parameter { name: "v"; type: "QVariant" }
        }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/RadioButton"
        exports: ["QtQuick.Controls/RadioButton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "checked"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "text"; type: "string" }
        Property { name: "__cycleStatesHandler"; type: "QVariant" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/ScrollView"
        exports: ["QtQuick.Controls/ScrollView 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentItem"
        Property { name: "frameVisible"; type: "bool" }
        Property { name: "highlightOnFocus"; type: "bool" }
        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__scroller"; type: "QQuickItem"; isPointer: true }
        Property { name: "__scrollBarTopMargin"; type: "int" }
        Property { name: "__viewTopMargin"; type: "int" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "Style_QMLTYPE_10"; isPointer: true }
        Property { name: "horizontalScrollBarPolicy"; type: "int" }
        Property { name: "verticalScrollBarPolicy"; type: "int" }
        Property { name: "viewport"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "flickableItem"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
        Property { name: "__wheelAreaScrollSpeed"; type: "double" }
        Property {
            name: "__horizontalScrollBar"
            type: "ScrollBar_QMLTYPE_30"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "__verticalScrollBar"
            type: "ScrollBar_QMLTYPE_30"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/Slider"
        exports: ["QtQuick.Controls/Slider 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "orientation"; type: "int" }
        Property { name: "updateValueWhileDragging"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "tickmarksEnabled"; type: "bool" }
        Property { name: "__horizontal"; type: "bool" }
        Property { name: "__handlePos"; type: "double" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "stepSize"; type: "double" }
        Property { name: "value"; type: "double" }
        Method { name: "accessibleIncreaseAction"; type: "QVariant" }
        Method { name: "accessibleDecreaseAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/SpinBox"
        exports: ["QtQuick.Controls/SpinBox 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "selectByMouse"; type: "bool" }
        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
        Property { name: "value"; type: "double" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "stepSize"; type: "double" }
        Property { name: "suffix"; type: "string" }
        Property { name: "prefix"; type: "string" }
        Property { name: "decimals"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "__text"; type: "string" }
        Property { name: "__baselineOffset"; type: "double" }
        Signal { name: "editingFinished" }
        Method { name: "__increment"; type: "QVariant" }
        Method { name: "__decrement"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.Controls/SplitView"
        exports: ["QtQuick.Controls/SplitView 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "__contents"
        Property { name: "orientation"; type: "int" }
        Property { name: "handleDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "resizing"; type: "bool" }
        Property { name: "__contents"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "__items"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "__handles"; type: "QQuickItem"; isList: true; isReadonly: true }
        Method {
            name: "addItem"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Method {
            name: "removeItem"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/StackView"
        exports: ["QtQuick.Controls/StackView 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "delegate"; type: "StackViewDelegate_QMLTYPE_307"; isPointer: true }
        Property { name: "__currentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__depth"; type: "int" }
        Property { name: "__guard"; type: "bool" }
        Property { name: "invalidItemReplacement"; type: "QQmlComponent"; isPointer: true }
        Property { name: "initialItem"; type: "QVariant" }
        Property { name: "__currentTransition"; type: "QVariant" }
        Property { name: "depth"; type: "int"; isReadonly: true }
        Property { name: "currentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Method {
            name: "push"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Method {
            name: "pop"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Method { name: "clear"; type: "QVariant" }
        Method {
            name: "find"
            type: "QVariant"
            Parameter { name: "func"; type: "QVariant" }
            Parameter { name: "onlySearchLoadedItems"; type: "QVariant" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "dontLoad"; type: "QVariant" }
        }
        Method { name: "completeTransition"; type: "QVariant" }
        Method {
            name: "replace"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
            Parameter { name: "properties"; type: "QVariant" }
            Parameter { name: "immediate"; type: "QVariant" }
        }
        Method {
            name: "__recursionGuard"
            type: "QVariant"
            Parameter { name: "use"; type: "QVariant" }
        }
        Method {
            name: "__loadElement"
            type: "QVariant"
            Parameter { name: "element"; type: "QVariant" }
        }
        Method {
            name: "__resolveComponent"
            type: "QVariant"
            Parameter { name: "unknownObjectType"; type: "QVariant" }
            Parameter { name: "element"; type: "QVariant" }
        }
        Method {
            name: "__cleanup"
            type: "QVariant"
            Parameter { name: "element"; type: "QVariant" }
        }
        Method {
            name: "__setStatus"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
            Parameter { name: "status"; type: "QVariant" }
        }
        Method {
            name: "__performTransition"
            type: "QVariant"
            Parameter { name: "transition"; type: "QVariant" }
        }
        Method { name: "animationFinished"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.Controls/StackViewDelegate"
        exports: ["QtQuick.Controls/StackViewDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "pushTransition"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popTransition"; type: "QQmlComponent"; isPointer: true }
        Property { name: "replaceTransition"; type: "QQmlComponent"; isPointer: true }
        Method {
            name: "getTransition"
            type: "QVariant"
            Parameter { name: "properties"; type: "QVariant" }
        }
        Method {
            name: "transitionFinished"
            type: "QVariant"
            Parameter { name: "properties"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickParallelAnimation"
        name: "QtQuick.Controls/StackViewTransition"
        exports: ["QtQuick.Controls/StackViewTransition 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "animations"
        Property { name: "name"; type: "string" }
        Property { name: "enterItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "exitItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "immediate"; type: "bool" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/StatusBar"
        exports: ["QtQuick.Controls/StatusBar 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "__content"
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "__content"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/StatusIndicator"
        exports: ["QtQuick.Extras/StatusIndicator 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "on"; type: "bool" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/Switch"
        exports: ["QtQuick.Controls/Switch 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "checked"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickLoader"
        name: "QtQuick.Controls/Tab"
        exports: ["QtQuick.Controls/Tab 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "component"
        Property { name: "title"; type: "string" }
        Property { name: "__inserted"; type: "bool" }
        Property { name: "component"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/TabView"
        exports: ["QtQuick.Controls/TabView 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "currentIndex"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "frameVisible"; type: "bool" }
        Property { name: "tabsVisible"; type: "bool" }
        Property { name: "tabPosition"; type: "int" }
        Property { name: "__tabs"; type: "QQmlListModel"; isPointer: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__styleItem"; type: "QVariant" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Method {
            name: "addTab"
            type: "QVariant"
            Parameter { name: "title"; type: "QVariant" }
            Parameter { name: "component"; type: "QVariant" }
        }
        Method {
            name: "insertTab"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "title"; type: "QVariant" }
            Parameter { name: "component"; type: "QVariant" }
        }
        Method {
            name: "removeTab"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "moveTab"
            type: "QVariant"
            Parameter { name: "from"; type: "QVariant" }
            Parameter { name: "to"; type: "QVariant" }
        }
        Method {
            name: "getTab"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "__willRemoveIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "__didInsertIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method { name: "__setOpacities"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/TableView"
        exports: ["QtQuick.Controls/TableView 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "__columns"
        Property { name: "rowCount"; type: "int"; isReadonly: true }
        Property { name: "model"; type: "QVariant" }
        Property { name: "currentRow"; type: "int" }
        Property {
            name: "selection"
            type: "TableViewSelection_QMLTYPE_200"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "activated"
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "clicked"
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "doubleClicked"
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "pressAndHold"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "positionViewAtRow"
            type: "QVariant"
            Parameter { name: "row"; type: "QVariant" }
            Parameter { name: "mode"; type: "QVariant" }
        }
        Method {
            name: "rowAt"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Property { name: "alternatingRowColors"; type: "bool" }
        Property { name: "headerVisible"; type: "bool" }
        Property { name: "itemDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "rowDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "headerDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "sortIndicatorColumn"; type: "int" }
        Property { name: "sortIndicatorVisible"; type: "bool" }
        Property { name: "sortIndicatorOrder"; type: "int" }
        Property { name: "selectionMode"; type: "int" }
        Property { name: "__viewTypeName"; type: "string" }
        Property { name: "__isTreeView"; type: "bool"; isReadonly: true }
        Property { name: "__itemDelegateLoader"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__activateItemOnSingleClick"; type: "bool" }
        Property { name: "__mouseArea"; type: "QQuickItem"; isPointer: true }
        Property { name: "__model"; type: "QVariant" }
        Property { name: "backgroundVisible"; type: "bool" }
        Property { name: "contentHeader"; type: "QQmlComponent"; isPointer: true }
        Property { name: "contentFooter"; type: "QQmlComponent"; isPointer: true }
        Property { name: "columnCount"; type: "int"; isReadonly: true }
        Property { name: "section"; type: "QQuickViewSection"; isReadonly: true; isPointer: true }
        Property { name: "__columns"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "__currentRowItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "__currentRow"; type: "int" }
        Property { name: "__listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
        Method {
            name: "addColumn"
            type: "QVariant"
            Parameter { name: "column"; type: "QVariant" }
        }
        Method {
            name: "insertColumn"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "column"; type: "QVariant" }
        }
        Method {
            name: "removeColumn"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "moveColumn"
            type: "QVariant"
            Parameter { name: "from"; type: "QVariant" }
            Parameter { name: "to"; type: "QVariant" }
        }
        Method {
            name: "getColumn"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method { name: "resizeColumnsToContents"; type: "QVariant" }
        Property { name: "frameVisible"; type: "bool" }
        Property { name: "highlightOnFocus"; type: "bool" }
        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__scroller"; type: "QQuickItem"; isPointer: true }
        Property { name: "__scrollBarTopMargin"; type: "int" }
        Property { name: "__viewTopMargin"; type: "int" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "Style_QMLTYPE_10"; isPointer: true }
        Property { name: "horizontalScrollBarPolicy"; type: "int" }
        Property { name: "verticalScrollBarPolicy"; type: "int" }
        Property { name: "viewport"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "flickableItem"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
        Property { name: "__wheelAreaScrollSpeed"; type: "double" }
        Property {
            name: "__horizontalScrollBar"
            type: "ScrollBar_QMLTYPE_30"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "__verticalScrollBar"
            type: "ScrollBar_QMLTYPE_30"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.Controls/TableViewColumn"
        exports: ["QtQuick.Controls/TableViewColumn 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "__view"; type: "QQuickItem"; isPointer: true }
        Property { name: "__index"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "role"; type: "string" }
        Property { name: "width"; type: "int" }
        Property { name: "visible"; type: "bool" }
        Property { name: "resizable"; type: "bool" }
        Property { name: "movable"; type: "bool" }
        Property { name: "elideMode"; type: "int" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Method { name: "resizeToContents"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/TextArea"
        exports: ["QtQuick.Controls/TextArea 1.3"]
        exportMetaObjectRevisions: [3]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
        Property { name: "tabChangesFocus"; type: "bool" }
        Property { name: "selectByMouse"; type: "bool" }
        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "baseUrl"; type: "QUrl" }
        Property { name: "canPaste"; type: "bool"; isReadonly: true }
        Property { name: "canRedo"; type: "bool"; isReadonly: true }
        Property { name: "canUndo"; type: "bool"; isReadonly: true }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "cursorPosition"; type: "int" }
        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true }
        Property { name: "font"; type: "QFont" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "effectiveHorizontalAlignment"; type: "int"; isReadonly: true }
        Property { name: "verticalAlignment"; type: "int" }
        Property { name: "inputMethodHints"; type: "int" }
        Property { name: "length"; type: "int"; isReadonly: true }
        Property { name: "lineCount"; type: "int"; isReadonly: true }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "selectedText"; type: "string"; isReadonly: true }
        Property { name: "selectionEnd"; type: "int"; isReadonly: true }
        Property { name: "selectionStart"; type: "int"; isReadonly: true }
        Property { name: "text"; type: "string" }
        Property { name: "textFormat"; type: "int" }
        Property { name: "wrapMode"; type: "int" }
        Property { name: "selectByKeyboard"; type: "bool" }
        Property { name: "hoveredLink"; type: "string"; isReadonly: true }
        Property { name: "backgroundVisible"; type: "bool" }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "textMargin"; type: "double" }
        Property { name: "contentWidth"; type: "double"; isReadonly: true }
        Property { name: "contentHeight"; type: "double"; isReadonly: true }
        Property { name: "textDocument"; type: "QQuickTextDocument"; isReadonly: true; isPointer: true }
        Signal {
            name: "linkActivated"
            Parameter { name: "link"; type: "string" }
        }
        Signal {
            name: "linkHovered"
            Parameter { name: "link"; type: "string" }
        }
        Method {
            name: "append"
            type: "QVariant"
            Parameter { name: "string"; type: "QVariant" }
        }
        Method { name: "copy"; type: "QVariant" }
        Method { name: "cut"; type: "QVariant" }
        Method { name: "deselect"; type: "QVariant" }
        Method {
            name: "getFormattedText"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method {
            name: "getText"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method {
            name: "insert"
            type: "QVariant"
            Parameter { name: "position"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "isRightToLeft"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method {
            name: "moveCursorSelection"
            type: "QVariant"
            Parameter { name: "position"; type: "QVariant" }
            Parameter { name: "mode"; type: "QVariant" }
        }
        Method { name: "paste"; type: "QVariant" }
        Method {
            name: "positionAt"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method {
            name: "positionToRectangle"
            type: "QVariant"
            Parameter { name: "position"; type: "QVariant" }
        }
        Method { name: "redo"; type: "QVariant" }
        Method {
            name: "remove"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method {
            name: "select"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method { name: "selectAll"; type: "QVariant" }
        Method { name: "selectWord"; type: "QVariant" }
        Method { name: "undo"; type: "QVariant" }
        Property { name: "frameVisible"; type: "bool" }
        Property { name: "highlightOnFocus"; type: "bool" }
        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__scroller"; type: "QQuickItem"; isPointer: true }
        Property { name: "__scrollBarTopMargin"; type: "int" }
        Property { name: "__viewTopMargin"; type: "int" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "Style_QMLTYPE_10"; isPointer: true }
        Property { name: "horizontalScrollBarPolicy"; type: "int" }
        Property { name: "verticalScrollBarPolicy"; type: "int" }
        Property { name: "viewport"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "flickableItem"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
        Property { name: "__wheelAreaScrollSpeed"; type: "double" }
        Property {
            name: "__horizontalScrollBar"
            type: "ScrollBar_QMLTYPE_30"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "__verticalScrollBar"
            type: "ScrollBar_QMLTYPE_30"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/TextField"
        exports: ["QtQuick.Controls/TextField 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
        Property { name: "selectByMouse"; type: "bool" }
        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
        Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "canPaste"; type: "bool"; isReadonly: true }
        Property { name: "canRedo"; type: "bool"; isReadonly: true }
        Property { name: "canUndo"; type: "bool"; isReadonly: true }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "cursorPosition"; type: "int" }
        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true }
        Property { name: "displayText"; type: "string"; isReadonly: true }
        Property { name: "echoMode"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "effectiveHorizontalAlignment"; type: "int"; isReadonly: true }
        Property { name: "verticalAlignment"; type: "int" }
        Property { name: "inputMask"; type: "string" }
        Property { name: "inputMethodHints"; type: "int" }
        Property { name: "length"; type: "int"; isReadonly: true }
        Property { name: "maximumLength"; type: "int" }
        Property { name: "placeholderText"; type: "string" }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "selectedText"; type: "string"; isReadonly: true }
        Property { name: "selectionEnd"; type: "int"; isReadonly: true }
        Property { name: "selectionStart"; type: "int"; isReadonly: true }
        Property { name: "text"; type: "string" }
        Property { name: "validator"; type: "QValidator"; isPointer: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "__contentHeight"; type: "double"; isReadonly: true }
        Property { name: "__contentWidth"; type: "double"; isReadonly: true }
        Property { name: "__baselineOffset"; type: "double" }
        Signal { name: "accepted" }
        Signal { name: "editingFinished" }
        Method { name: "copy"; type: "QVariant" }
        Method { name: "cut"; type: "QVariant" }
        Method { name: "deselect"; type: "QVariant" }
        Method {
            name: "getText"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method {
            name: "insert"
            type: "QVariant"
            Parameter { name: "position"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "isRightToLeft"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method { name: "paste"; type: "QVariant" }
        Method { name: "redo"; type: "QVariant" }
        Method {
            name: "remove"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method {
            name: "select"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method { name: "selectAll"; type: "QVariant" }
        Method { name: "selectWord"; type: "QVariant" }
        Method { name: "undo"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickText"
        name: "QtQuick.Extras.Private/TextSingleton"
        exports: ["QtQuick.Extras.Private/TextSingleton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "data"
    }
    Component {
        prototype: "DRObject"
        name: "Theme"
        exports: ["Theme -1.-1"]
        exportMetaObjectRevisions: [-1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "children"
        Property { name: "palette"; type: "DRObject"; isReadonly: true; isPointer: true }
        Property { name: "listStyle"; type: "DRObject"; isReadonly: true; isPointer: true }
        Property { name: "defaultFont"; type: "QFont"; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/ToggleButton"
        exports: ["QtQuick.Extras/ToggleButton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_56"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "action"; type: "QQuickAction"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/ToolBar"
        exports: ["QtQuick.Controls/ToolBar 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "__content"
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "__menu"; type: "QVariant" }
        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "__content"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "contentItem"; type: "ContentItem_QMLTYPE_9"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/ToolButton"
        exports: ["QtQuick.Controls/ToolButton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_56"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "action"; type: "QQuickAction"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Controls/TreeView"
        exports: ["QtQuick.Controls/TreeView 1.4"]
        exportMetaObjectRevisions: [4]
        isComposite: true
        defaultProperty: "__columns"
        Property { name: "selection"; type: "QItemSelectionModel"; isPointer: true }
        Property { name: "model"; type: "QVariant" }
        Property { name: "currentIndex"; type: "QVariant"; isReadonly: true }
        Signal {
            name: "activated"
            Parameter { name: "index"; type: "QVariant" }
        }
        Signal {
            name: "clicked"
            Parameter { name: "index"; type: "QVariant" }
        }
        Signal {
            name: "doubleClicked"
            Parameter { name: "index"; type: "QVariant" }
        }
        Signal {
            name: "pressAndHold"
            Parameter { name: "index"; type: "QVariant" }
        }
        Signal {
            name: "expanded"
            Parameter { name: "index"; type: "QVariant" }
        }
        Signal {
            name: "collapsed"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "isExpanded"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "collapse"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "expand"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "indexAt"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Property { name: "alternatingRowColors"; type: "bool" }
        Property { name: "headerVisible"; type: "bool" }
        Property { name: "itemDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "rowDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "headerDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "sortIndicatorColumn"; type: "int" }
        Property { name: "sortIndicatorVisible"; type: "bool" }
        Property { name: "sortIndicatorOrder"; type: "int" }
        Property { name: "selectionMode"; type: "int" }
        Property { name: "__viewTypeName"; type: "string" }
        Property { name: "__isTreeView"; type: "bool"; isReadonly: true }
        Property { name: "__itemDelegateLoader"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__activateItemOnSingleClick"; type: "bool" }
        Property { name: "__mouseArea"; type: "QQuickItem"; isPointer: true }
        Property { name: "__model"; type: "QVariant" }
        Property { name: "backgroundVisible"; type: "bool" }
        Property { name: "contentHeader"; type: "QQmlComponent"; isPointer: true }
        Property { name: "contentFooter"; type: "QQmlComponent"; isPointer: true }
        Property { name: "columnCount"; type: "int"; isReadonly: true }
        Property { name: "section"; type: "QQuickViewSection"; isReadonly: true; isPointer: true }
        Property { name: "__columns"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "__currentRowItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "__currentRow"; type: "int" }
        Property { name: "__listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
        Method {
            name: "addColumn"
            type: "QVariant"
            Parameter { name: "column"; type: "QVariant" }
        }
        Method {
            name: "insertColumn"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "column"; type: "QVariant" }
        }
        Method {
            name: "removeColumn"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "moveColumn"
            type: "QVariant"
            Parameter { name: "from"; type: "QVariant" }
            Parameter { name: "to"; type: "QVariant" }
        }
        Method {
            name: "getColumn"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method { name: "resizeColumnsToContents"; type: "QVariant" }
        Property { name: "frameVisible"; type: "bool" }
        Property { name: "highlightOnFocus"; type: "bool" }
        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__scroller"; type: "QQuickItem"; isPointer: true }
        Property { name: "__scrollBarTopMargin"; type: "int" }
        Property { name: "__viewTopMargin"; type: "int" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "Style_QMLTYPE_10"; isPointer: true }
        Property { name: "horizontalScrollBarPolicy"; type: "int" }
        Property { name: "verticalScrollBarPolicy"; type: "int" }
        Property { name: "viewport"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "flickableItem"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
        Property { name: "__wheelAreaScrollSpeed"; type: "double" }
        Property {
            name: "__horizontalScrollBar"
            type: "ScrollBar_QMLTYPE_30"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "__verticalScrollBar"
            type: "ScrollBar_QMLTYPE_30"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/Tumbler"
        exports: ["QtQuick.Extras/Tumbler 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "data"
        Property { name: "__highlightMoveDuration"; type: "int" }
        Property { name: "columnCount"; type: "int"; isReadonly: true }
        Property { name: "__columnRow"; type: "QQuickRow"; isReadonly: true; isPointer: true }
        Property { name: "__movementDelayTimer"; type: "QQmlTimer"; isReadonly: true; isPointer: true }
        Method {
            name: "__isValidColumnIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "__isValidColumnAndItemIndex"
            type: "QVariant"
            Parameter { name: "columnIndex"; type: "QVariant" }
            Parameter { name: "itemIndex"; type: "QVariant" }
        }
        Method {
            name: "currentIndexAt"
            type: "QVariant"
            Parameter { name: "columnIndex"; type: "QVariant" }
        }
        Method {
            name: "setCurrentIndexAt"
            type: "QVariant"
            Parameter { name: "columnIndex"; type: "QVariant" }
            Parameter { name: "itemIndex"; type: "QVariant" }
        }
        Method {
            name: "getColumn"
            type: "QVariant"
            Parameter { name: "columnIndex"; type: "QVariant" }
        }
        Method {
            name: "addColumn"
            type: "QVariant"
            Parameter { name: "column"; type: "QVariant" }
        }
        Method {
            name: "insertColumn"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "column"; type: "QVariant" }
        }
        Method {
            name: "__viewAt"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.Extras/TumblerColumn"
        exports: ["QtQuick.Extras/TumblerColumn 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        Property { name: "__tumbler"; type: "QQuickItem"; isPointer: true }
        Property { name: "__index"; type: "int" }
        Property { name: "__currentIndex"; type: "int" }
        Property { name: "role"; type: "string" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "highlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "columnForeground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "visible"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "width"; type: "double" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "currentIndex"; type: "int"; isReadonly: true }
    }
}
