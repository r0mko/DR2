console.log("Hello from parser")
var chapters = ["Диалоговый инструментарий", "Интеграция в AWL", "Основное управление диалогом", "Задание на запуск диалога", "Задание на завершение диалога", "Квитирование задания", "Задание фазы диалога", "Задание на работу с диалогом", "Задание на импорт данных", "Задание на достоверизацию элемента данных", "Задание на достоверизацию набора данных", "Файлы управление диалогом", "Секция Элементы управления", "Секция Векторы элементов управления", "Секция Ввод действия", "Секция Ввод объекта", "Секция Константы", "Секция Наборы данных", "Секция Индексы для векторов и циклов", "Секция Тексты справки", "Секция Тексты ошибок", "Секция Преобразование ошибок", "Секция Достоверизация", "Секция Блоки статусов элементов управления", "Секция Макрос алгоритма", "Секция Фазы диалога", "Задание имен", "Начальный шаг фазы", "Глобальный блок случаев", "Блок шага", "Имя шага", "Запуск шага_фрагмент", "Алгоритмы наборов данных", "Условные алгоритмы", "ZDM_DIA_алгоритм", "ZDM_ABW_алгоритм", "Графические алгоритмы", "Алгоритмы последовательных шагов", "Циклический алгоритм", "Алгоритм резервирования монитора", "Вызов макроса", "Алгоритмы фрагментов", "Алгоритмы окончания фазы", "Алгоритм запуска диалога", "Алгоритм запуска запланированного диалога", "Алгоритм завершения диалога", "Алгоритм импорта данных диалога", "Алгоритм экспорта данных диалога", "Алгоритмы элементов управления", "Алгоритм_HALT", "Алгоритм приостановки(паузы)", "Алгоритм звука", "Алгоритмы событий", "Алгоритмы даты и времени", "Алгоритм планирования", "Алгоритм сдвига планирования по времени(отсрочки)", "Алгоритм перехода к метке", "Алгоритм метки", "Алгоритмы DAS-запроса", "Алгоритм справки пользователя", "Алгоритм триггера", "Повтор шага_фрагмент", "Прерывание шага_фрагмент", "Завершение шага_фрагмент", "Диалог_фрагмент", "Блок управления шагами", "Отладчик диалогов", "Макросы диалога", "Алгоритмы последовательности управляющих команд", "Алгоритм синхронизации", "Алгоритм ожидания", "Алгоритм освобождения", "Алгоритм запуска последовательности", "Алгоритм завершения последовательности", "Алгоритм прерывания последовательности", "Алгоритм телеграмм в формате Ascii", "Внешний алгоритм", "Алгоритм внешних параметров", "Алгоритм протоколирования последовательности", "Алгоритм импорта параметров", "Алгоритм квитирования", "Алгоритм пользователя", "Ввод внешних алгоритмов в последовательность", "Описание телеграмм"];

function loadTextFile(filename, encoding)
{
    if(!encoding)
        encoding = "UTF-8"
    var f = new QFile(filename)
    var ts = new QTextStream(f)
    ts.setCodec(encoding)
    if(f.open(QIODevice.ReadOnly)) {
        var content = ts.readAll()
        f.close()
        return content;
    }
}

function saveTextFile(filename, text, encoding)
{
    if(!encoding)
        encoding = "UTF-8"
    var file = new QFile(filename)
    if(file.open(QIODevice.WriteOnly)) {
        var ts = new QTextStream(file)
        ts.setCodec(encoding)
        ts.writeString(text + "\n")
        ts.flush()
        file.flush()
        file.close()
        return true
    }
    else
    {
        console.log("Error creating file!")
        return false
    }
}

var document = new String
document = loadTextFile("diat_ru.txt", "CP1251");

function replaceHeader(item, index, array)
{
    var rPattern ="(\\d+(\\.*\\d*)*)\\s+(" + item + ")"
    var rx = new RegExp(rPattern, 'gm')
    var matches = rx.exec(document)
    if(matches) {
//        debugger;
        var chDeep = matches[1].split(".").length
        var newStr = ""
        for(var i=0; i<chDeep; ++i)
            newStr += "="
        newStr += item
        for(var i=0; i<chDeep; ++i)
            newStr += "="
        document = document.replace(rx, newStr)
    }

//    debugger
}

chapters.forEach(replaceHeader)
saveTextFile("diat_ru_wikified.txt", document, "CP1251")

debugger
